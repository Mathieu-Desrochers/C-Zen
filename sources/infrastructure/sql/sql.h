#ifndef SQL_H
#define SQL_H

#include <sqlite3.h>
#include <time.h>

// opens a database connection
int sql_connection_open(char *filename, sqlite3 **sql_connection);

// begins a sql transaction
int sql_transaction_begin(sqlite3 *sql_connection);

// prepares a sql statement
int sql_statement_prepare(sqlite3 *sql_connection, char *sql, sqlite3_stmt **sql_statement);

// reads a sql column
int sql_read_int(sqlite3_stmt *sql_statement, int position, int **value);
int sql_read_double(sqlite3_stmt *sql_statement, int position, double **value);
int sql_read_string(sqlite3_stmt *sql_statement, int position, char **value);
int sql_read_date(sqlite3_stmt *sql_statement, int position, time_t **value);
int sql_read_date_time(sqlite3_stmt *sql_statement, int position, time_t **value);
int sql_read_time(sqlite3_stmt *sql_statement, int position, time_t **value);

// binds a sql statement parameter
int sql_bind_int(sqlite3_stmt *sql_statement, int position, int *value);
int sql_bind_double(sqlite3_stmt *sql_statement, int position, double *value);
int sql_bind_string(sqlite3_stmt *sql_statement, int position, char *value);
int sql_bind_date(sqlite3_stmt *sql_statement, int position, time_t *value);
int sql_bind_date_time(sqlite3_stmt *sql_statement, int position, time_t *value);
int sql_bind_time(sqlite3_stmt *sql_statement, int position, time_t *value);

// steps a sql statement that selects rows
int sql_step_select(sqlite3_stmt *sql_statement, int *is_row_available);

// steps a sql statement that executes a command
int sql_step_execute(sqlite3_stmt *sql_statement);

// finalizes a sql statement
void sql_statement_finalize(sqlite3_stmt *sql_statement);

// selects the row id generated by the last insert statement
int sql_last_generated_id(sqlite3 *sql_connection, int **last_insert_row_id);

// ends a sql transaction
int sql_transaction_commit(sqlite3 *sql_connection);
int sql_transaction_rollback(sqlite3 *sql_connection);

// closes a database connection
void sql_connection_close(sqlite3 *sql_connection);

#endif
